plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

allprojects {
    archivesBaseName = "earth2java-fabric"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modCompileOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") { transitive false }
    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

}

processResources {
    inputs.property 'modId', rootProject.mod_id
    inputs.property 'modName', rootProject.mod_name
    inputs.property 'modDescription', rootProject.mod_description
    inputs.property 'modVersion', rootProject.mod_version
    inputs.property 'modAuthor', rootProject.mod_author

    filesMatching("fabric.mod.json") {
        expand([
                'modId'         : rootProject.mod_id,
                'modName'       : rootProject.mod_name,
                'modDescription': rootProject.mod_description,
                'modVersion'    : rootProject.mod_version,
                'modAuthor'     : rootProject.mod_author
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
